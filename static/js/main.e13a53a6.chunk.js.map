{"version":3,"sources":["data/gwp.csv","data/allimpacts.csv","HorizontalBarChart.js","StackedBarChart.js","data/LoadData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","valueData","d","frequency","width","height","data","horizontalMax","horizontalScale","scaleLinear","rangeRound","domain","Math","max","map","GradientTealBlue","id","fill","rx","Group","top","i","letter","categoryData","barWidth","barY","Bar","key","x","y","onClick","event","alert","JSON","stringify","Object","values","withTooltip","events","margin","left","right","bottom","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","hideTooltip","showTooltip","xMax","yMax","console","log","tooltipTimeout","keys","filter","totals","reduce","ret","cur","t","dailyTotal","k","push","timeParse","timeFormat","material","xScale","nice","yScale","scaleBand","padding","color","scaleOrdinal","range","style","position","BarStackHorizontal","barStacks","barStack","bars","bar","index","onMouseLeave","setTimeout","onMouseMove","clearTimeout","AxisLeft","hideAxisLine","hideTicks","scale","stroke","tickStroke","tickLabelProps","value","fontSize","textAnchor","dy","AxisBottom","display","justifyContent","direction","labelMargin","Tooltip","minWidth","backgroundColor","PAPAPARSE_CONFIG","download","header","skipEmptyLines","cb","Papa","parse","dataAllImpacts","complete","results","file","Array","isArray","resultData","impact1","parseFloat","impact2","impact3","error","errors","dataGWP","Variable","Attended","App","props","state","chartType","allImpactsData","gwpData","handleInputChange","bind","LoadData","setState","target","type","checked","name","this","className","onChange","htmlFor","for","length","StackedBarChart","HorizontalBarChart","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e13a53a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gwp.7df9e12d.csv\";","module.exports = __webpack_public_path__ + \"static/media/allimpacts.38f595ea.csv\";","import React from 'react';\r\nimport { Bar } from '@vx/shape';\r\nimport { Group } from '@vx/group';\r\nimport { GradientTealBlue } from '@vx/gradient';\r\nimport { scaleLinear } from '@vx/scale';\r\n\r\n// accessors\r\nconst categoryData = d => d.letter;\r\nconst valueData = d => +d.frequency * 100;\r\n\r\nexport default ({ width, height, data }) => {\r\n  // bounds\r\n  const horizontalPadding = 60;\r\n  const horizontalMax = width - 2*horizontalPadding;\r\n\r\n  // scales\r\n  const horizontalScale = scaleLinear({\r\n    rangeRound: [horizontalMax, 0],\r\n    domain: [0, Math.max(...data.map(valueData))]\r\n  });\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      <GradientTealBlue id=\"teal\" />\r\n      <rect width={width} height={height} fill={\"url(#teal)\"} rx={14} />\r\n      <Group top={40}>\r\n        {data.map((d, i) => {\r\n          const letter = categoryData(d);\r\n          const barHeight = 20;\r\n          const barWidth = horizontalMax - horizontalScale(valueData(d));\r\n          const barY = (barHeight + 5) * i;\r\n          const barX = horizontalPadding;\r\n          return (\r\n            <Bar\r\n              key={`bar-${letter}`}\r\n              x={barX}\r\n              y={barY}\r\n              width={barWidth}\r\n              height={barHeight}\r\n              fill=\"rgba(23, 233, 217, .5)\"\r\n              onClick={event => {\r\n                alert(`clicked: ${JSON.stringify(Object.values(d))}`);\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </Group>\r\n    </svg>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BarStackHorizontal } from '@vx/shape';\r\nimport { Group } from '@vx/group';\r\nimport { AxisBottom, AxisLeft } from '@vx/axis';\r\nimport { cityTemperature } from '@vx/mock-data';\r\nimport { scaleBand, scaleLinear, scaleOrdinal } from '@vx/scale';\r\nimport { timeParse, timeFormat } from 'd3-time-format';\r\nimport { withTooltip, Tooltip } from '@vx/tooltip';\r\nimport { LegendOrdinal } from '@vx/legend';\r\n\r\nexport default withTooltip(\r\n  ({\r\n    width,\r\n    height,\r\n    data,\r\n    events = false,\r\n    margin = {\r\n      top: 40,\r\n      left: 50,\r\n      right: 40,\r\n      bottom: 100\r\n    },\r\n    tooltipOpen,\r\n    tooltipLeft,\r\n    tooltipTop,\r\n    tooltipData,\r\n    hideTooltip,\r\n    showTooltip\r\n  }) => {\r\n    if (width < 10) return null;\r\n\r\n    // bounds\r\n    const xMax = width - margin.left - margin.right;\r\n    const yMax = height - margin.top - margin.bottom;\r\n\r\n    const purple1 = '#6c5efb';\r\n    const purple2 = '#c998ff';\r\n    const purple3 = '#a44afe';\r\n    const bg = '#eaedff';\r\n\r\n    // const data = cityTemperature.slice(0, 12);\r\n    console.log(data);\r\n    const keys = Object.keys(data[0]).filter(d => d !== 'material');\r\n\r\n    const totals = data.reduce((ret, cur) => {\r\n      const t = keys.reduce((dailyTotal, k) => {\r\n        dailyTotal += +cur[k];\r\n        return dailyTotal;\r\n      }, 0);\r\n      ret.push(t);\r\n      return ret;\r\n    }, []);\r\n\r\n    const parseDate = timeParse('%Y%m%d');\r\n    const format = timeFormat('%b %d');\r\n    const formatDate = date => format(parseDate(date));\r\n\r\n    // accessors\r\n    const y = d => d.material;\r\n\r\n    // scales\r\n    const xScale = scaleLinear({\r\n      domain: [0, Math.max(...totals)],\r\n      nice: true\r\n    });\r\n    const yScale = scaleBand({\r\n      domain: data.map(y),\r\n      padding: 0.2\r\n    });\r\n    const color = scaleOrdinal({\r\n      domain: keys,\r\n      range: [purple1, purple2, purple3]\r\n    });\r\n\r\n    let tooltipTimeout;\r\n\r\n    xScale.rangeRound([0, xMax]);\r\n    yScale.rangeRound([yMax, 0]);\r\n\r\n    return (\r\n      <div style={{ position: 'relative' }}>\r\n        <svg width={width} height={height}>\r\n          <rect width={width} height={height} fill={bg} rx={14} />\r\n          <Group top={margin.top} left={margin.left}>\r\n            <BarStackHorizontal\r\n              data={data}\r\n              keys={keys}\r\n              height={yMax}\r\n              y={y}\r\n              xScale={xScale}\r\n              yScale={yScale}\r\n              color={color}\r\n            >\r\n              {barStacks => {\r\n                return barStacks.map(barStack => {\r\n                  return barStack.bars.map(bar => {\r\n                    return (\r\n                      <rect\r\n                        key={`barstack-horizontal-${barStack.index}-${bar.index}`}\r\n                        x={bar.x}\r\n                        y={bar.y}\r\n                        width={bar.width}\r\n                        height={bar.height}\r\n                        fill={bar.color}\r\n                        onClick={event => {\r\n                          if (!events) return;\r\n                          alert(`clicked: ${JSON.stringify(bar)}`);\r\n                        }}\r\n                        onMouseLeave={event => {\r\n                          tooltipTimeout = setTimeout(() => {\r\n                            hideTooltip();\r\n                          }, 300);\r\n                        }}\r\n                        onMouseMove={event => {\r\n                          if (tooltipTimeout) clearTimeout(tooltipTimeout);\r\n                          const top = bar.y + margin.top;\r\n                          const left = bar.x + bar.width + margin.left;\r\n                          showTooltip({\r\n                            tooltipData: bar,\r\n                            tooltipTop: top,\r\n                            tooltipLeft: left\r\n                          });\r\n                        }}\r\n                      />\r\n                    );\r\n                  });\r\n                });\r\n              }}\r\n            </BarStackHorizontal>\r\n            <AxisLeft\r\n              hideAxisLine={true}\r\n              hideTicks={true}\r\n              scale={yScale}\r\n              /* tickFormat={formatDate} */\r\n              stroke={purple3}\r\n              tickStroke={purple3}\r\n              tickLabelProps={(value, index) => ({\r\n                fill: purple3,\r\n                fontSize: 11,\r\n                textAnchor: 'end',\r\n                dy: '0.33em'\r\n              })}\r\n            />\r\n            <AxisBottom\r\n              top={yMax}\r\n              scale={xScale}\r\n              stroke={purple3}\r\n              tickStroke={purple3}\r\n              tickLabelProps={(value, index) => ({\r\n                fill: purple3,\r\n                fontSize: 11,\r\n                textAnchor: 'middle'\r\n              })}\r\n            />\r\n          </Group>\r\n        </svg>\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: margin.top / 2 - 10,\r\n            width: '100%',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            fontSize: '14px'\r\n          }}\r\n        >\r\n          <LegendOrdinal scale={color} direction=\"row\" labelMargin=\"0 15px 0 0\" />\r\n        </div>\r\n        {tooltipOpen && (\r\n          <Tooltip\r\n            top={tooltipTop}\r\n            left={tooltipLeft}\r\n            style={{\r\n              minWidth: 60,\r\n              backgroundColor: 'rgba(0,0,0,0.9)',\r\n              color: 'white'\r\n            }}\r\n          >\r\n            <div style={{ color: color(tooltipData.key) }}>\r\n              <strong>{tooltipData.key}</strong>\r\n            </div>\r\n            <div>{tooltipData.bar.data[tooltipData.key]}</div>\r\n            <div>\r\n              <small>{y(tooltipData.bar.data)}</small>\r\n            </div>\r\n          </Tooltip>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import Papa from 'papaparse';\r\nimport dataGWP from './gwp.csv';\r\nimport dataAllImpacts from './allimpacts.csv';\r\n\r\nconst PAPAPARSE_CONFIG = {\r\n  download: true,\r\n  header: true,\r\n  skipEmptyLines: true\r\n};\r\n\r\nexport default {\r\n  allImpactsData: (cb) => {\r\n    Papa.parse(dataAllImpacts, {\r\n      ...PAPAPARSE_CONFIG,\r\n      complete: function(results, file) {\r\n       if(Array.isArray(results.data)) {\r\n         const resultData = results.data.map(d => {\r\n           return { material: d.material, impact1: parseFloat(d.impact1), impact2: parseFloat(d.impact2), impact3: parseFloat(d.impact3) }\r\n         });\r\n         cb(resultData);\r\n       } else {\r\n         console.error('error trying to load file', results.errors);\r\n       }\r\n     }\r\n    });\r\n  },\r\n\r\n  gwpData: (cb) => {\r\n    Papa.parse(dataGWP, {\r\n      ...PAPAPARSE_CONFIG,\r\n      complete: function(results, file) {\r\n       if(Array.isArray(results.data)) {\r\n         const resultData = results.data.map(d => {\r\n           return { letter: d.Variable, frequency: parseFloat(d.Attended) }\r\n         });\r\n         cb(resultData);\r\n       } else {\r\n         console.error('error trying to load file', results.errors);\r\n       }\r\n     }\r\n    });\r\n  }\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport HorizontalBarChart from './HorizontalBarChart';\nimport StackedBarChart from './StackedBarChart';\nimport LoadData from './data/LoadData';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartType: \"allImpacts\",\n      allImpactsData: [],\n      gwpData: []\n\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount() {\n    LoadData.allImpactsData(data => this.setState({ allImpactsData: data }));\n    LoadData.gwpData(data => this.setState({ gwpData: data }));\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    }, () => {\n      console.log('new state: ', this.state);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>LCA Tool</h1>\n\n          <form>\n            <p>CHART TYPE:</p>\n            <input type=\"radio\" id=\"allImpacts\" name=\"chartType\" value=\"allImpacts\" checked={this.state.chartType === \"allImpacts\"} onChange={this.handleInputChange} />\n            <label htmlFor=\"allImpacts\">All Impacts</label>\n            <input type=\"radio\" id=\"GWP\" value=\"GWP\" name=\"chartType\" checked={this.state.chartType === \"GWP\"} onChange={this.handleInputChange} />\n            <label for=\"fGWP\">Global Warming Potential</label>\n            <input type=\"radio\" id=\"LCS\" value=\"LCS\" name=\"chartType\" checked={this.state.chartType === \"LCS\"} onChange={this.handleInputChange} />\n            <label for=\"LCS\">Life Cycle Stage</label>\n            <input type=\"radio\" id=\"MB\" value=\"MB\" name=\"chartType\" checked={this.state.chartType === \"MB\"} onChange={this.handleInputChange} />\n            <label for=\"MB\">Material Breakdown</label>\n\n            <p>LIFESPAN:</p>\n            <input type=\"radio\" id=\"tenY\" name=\"lifeSpan\" value=\"tenY\" checked=\"checked\" />\n            <label for=\"tenY\">10 Year (No Mod D.)</label>\n            <input type=\"radio\" id=\"sixty1\" name=\"lifeSpan\" value=\"sixty1\" />\n            <label for=\"sixty1\">60 Year (With Mod D)</label>\n            <input type=\"radio\" id=\"sixty2\" name=\"lifeSpan\" value=\"sixty2\" />\n            <label for=\"sixty2\">60 Year (No Mod D)</label>\n\n            <p>BIOGENIC CARBON:</p>\n            <input type=\"radio\" id=\"yBio\" name=\"biogenicCarbon\" value=\"yBio\" checked=\"checked\" />\n            <label for=\"yBio\">With Biogenic Carbon</label>\n            <input type=\"radio\" id=\"nBio\" name=\"biogenicCarbon\" value=\"nBio\" />\n            <label for=\"nBio\">No Biogenic Carbon</label>\n\n        </form>\n\n        {this.state.chartType === \"allImpacts\" && this.state.allImpactsData.length > 0 && <StackedBarChart\n          data={this.state.allImpactsData}\n          width={800}\n          height={600}\n        />}\n\n        {this.state.chartType === \"GWP\" && this.state.gwpData.length > 0 && <HorizontalBarChart\n          data={this.state.gwpData}\n          width={800}\n          height={600}\n        />}\n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
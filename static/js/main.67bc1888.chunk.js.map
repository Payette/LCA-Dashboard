{"version":3,"sources":["data/allimpacts.csv","data/gwp.csv","BarChart.js","data/LoadData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","x","d","letter","y","frequency","width","height","data","console","log","xMax","yMax","xScale","scaleBand","rangeRound","domain","map","padding","yScale","scaleLinear","Math","max","GradientTealBlue","id","fill","rx","Group","top","i","barWidth","bandwidth","barHeight","barX","barY","Bar","key","onClick","event","alert","JSON","stringify","Object","values","PAPAPARSE_CONFIG","download","header","skipEmptyLines","cb","Papa","parse","dataAllImpacts","complete","results","file","Array","isArray","allImpactsData","Variable","parseFloat","Attended","error","errors","App","props","state","chartType","handleInputChange","bind","LoadData","setState","target","value","type","checked","name","this","className","onChange","htmlFor","for","BarChart","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67bc1888.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/allimpacts.5c5df224.csv\";","module.exports = __webpack_public_path__ + \"static/media/gwp.7df9e12d.csv\";","import React from 'react';\r\nimport { Bar } from '@vx/shape';\r\nimport { Group } from '@vx/group';\r\nimport { GradientTealBlue } from '@vx/gradient';\r\nimport { scaleBand, scaleLinear } from '@vx/scale';\r\n\r\n// accessors\r\nconst x = d => d.letter;\r\nconst y = d => +d.frequency * 100;\r\n\r\nexport default ({ width, height, data }) => {\r\n  console.log(data);\r\n\r\n  // bounds\r\n  const xMax = width;\r\n  const yMax = height - 120;\r\n\r\n  // scales\r\n  const xScale = scaleBand({\r\n    rangeRound: [0, xMax],\r\n    domain: data.map(x),\r\n    padding: 0.4\r\n  });\r\n  const yScale = scaleLinear({\r\n    rangeRound: [yMax, 0],\r\n    domain: [0, Math.max(...data.map(y))]\r\n  });\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      <GradientTealBlue id=\"teal\" />\r\n      <rect width={width} height={height} fill={\"url(#teal)\"} rx={14} />\r\n      <Group top={40}>\r\n        {data.map((d, i) => {\r\n          const letter = x(d);\r\n          const barWidth = xScale.bandwidth();\r\n          const barHeight = yMax - yScale(y(d));\r\n          const barX = xScale(letter);\r\n          const barY = yMax - barHeight;\r\n          return (\r\n            <Bar\r\n              key={`bar-${letter}`}\r\n              x={barX}\r\n              y={barY}\r\n              width={barWidth}\r\n              height={barHeight}\r\n              fill=\"rgba(23, 233, 217, .5)\"\r\n              onClick={event => {\r\n                alert(`clicked: ${JSON.stringify(Object.values(d))}`);\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </Group>\r\n    </svg>\r\n  );\r\n};\r\n","import Papa from 'papaparse';\r\nimport dataGWP from './gwp.csv';\r\nimport dataAllImpacts from './allimpacts.csv';\r\n\r\nconst PAPAPARSE_CONFIG = {\r\n  download: true,\r\n  header: true,\r\n  skipEmptyLines: true\r\n};\r\n\r\nexport default {\r\n  allImpactsData: (cb) => {\r\n    Papa.parse(dataAllImpacts, {\r\n      ...PAPAPARSE_CONFIG,\r\n      complete: function(results, file) {\r\n       if(Array.isArray(results.data)) {\r\n         const allImpactsData = results.data.map(d => {\r\n           return { letter: d.Variable, frequency: parseFloat(d.Attended) }\r\n         });\r\n         cb(allImpactsData);\r\n       } else {\r\n         console.error('error trying to load file', results.errors);\r\n       }\r\n     }\r\n    });\r\n  }\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport BarChart from './BarChart';\nimport LoadData from './data/LoadData';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartType: \"allImpacts\",\n      allImpactsData: []\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount() {\n    LoadData.allImpactsData(data => this.setState({ allImpactsData: data }));\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    }, () => {\n      console.log('new state: ', this.state);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>LCA Tool</h1>\n\n          <form>\n            <p>CHART TYPE:</p>\n            <input type=\"radio\" id=\"allImpacts\" name=\"chartType\" value=\"allImpacts\" checked={this.state.chartType === \"allImpacts\"} onChange={this.handleInputChange} />\n            <label htmlFor=\"allImpacts\">All Impacts</label>\n            <input type=\"radio\" id=\"GWP\" value=\"GWP\" name=\"chartType\" checked={this.state.chartType === \"GWP\"} onChange={this.handleInputChange} />\n            <label for=\"fGWP\">Global Warming Potential</label>\n            <input type=\"radio\" id=\"LCS\" value=\"LCS\" name=\"chartType\" checked={this.state.chartType === \"LCS\"} onChange={this.handleInputChange} />\n            <label for=\"LCS\">Life Cycle Stage</label>\n            <input type=\"radio\" id=\"MB\" value=\"MB\" name=\"chartType\" checked={this.state.chartType === \"MB\"} onChange={this.handleInputChange} />\n            <label for=\"MB\">Material Breakdown</label>\n\n            <p>LIFESPAN:</p>\n            <input type=\"radio\" id=\"tenY\" name=\"lifeSpan\" value=\"tenY\" checked=\"checked\" />\n            <label for=\"tenY\">10 Year (No Mod D.)</label>\n            <input type=\"radio\" id=\"sixty1\" name=\"lifeSpan\" value=\"sixty1\" />\n            <label for=\"sixty1\">60 Year (With Mod D)</label>\n            <input type=\"radio\" id=\"sixty2\" name=\"lifeSpan\" value=\"sixty2\" />\n            <label for=\"sixty2\">60 Year (No Mod D)</label>\n\n            <p>BIOGENIC CARBON:</p>\n            <input type=\"radio\" id=\"yBio\" name=\"biogenicCarbon\" value=\"yBio\" checked=\"checked\" />\n            <label for=\"yBio\">With Biogenic Carbon</label>\n            <input type=\"radio\" id=\"nBio\" name=\"biogenicCarbon\" value=\"nBio\" />\n            <label for=\"nBio\">No Biogenic Carbon</label>\n\n        </form>\n\n        {this.state.chartType === \"allImpacts\" && <BarChart\n          data={this.state.allImpactsData}\n          width={800}\n          height={600}\n        />}\n\n        {/* this.state.chartType === \"MB\" && <BarChart\n          width={800}\n          height={600}\n        /> */}\n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}